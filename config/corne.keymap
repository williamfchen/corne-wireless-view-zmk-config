/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            label = "Base";
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R  &kp T            &kp Y      &kp U  &kp I         &kp O    &kp P     &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D     &kp F  &kp G            &kp H      &kp J  &kp K         &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V  &kp B            &kp N      &kp M  &kp COMMA     &kp DOT  &kp FSLH  &kp ESC
                         &kp LGUI  &mo 2  &kp BACKSPACE    &kp SPACE  &mo 1  &kp LEFT_ALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT6 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Lower";
            bindings = <
&kp TAB           &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2      &kp C_VOLUME_UP      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_0    &kp UP_ARROW    &kp BSPC
&kp LEFT_CONTROL  &kp LEFT_ALT  &trans        &kp A         &trans            &kp C_VOLUME_DOWN    &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW
&kp LSHFT         &trans        &trans        &trans        &kp C_PLAY_PAUSE  &kp K_MUTE           &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0    &trans          &kp ENTER
                                              &kp LGUI      &mo 3             &kp BACKSPACE        &kp SPACE     &trans        &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Raise";
            bindings = <
&kp TAB    &trans    &kp EXCLAMATION  &kp AT_SIGN   &kp HASH          &kp C_VOLUME_UP    &trans     &trans     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans     &kp BSPC
&kp LCTRL  &kp HASH  &kp DOLLAR       &kp PERCENT   &kp CARET         &kp C_VOL_DN       &kp MINUS  &kp EQUAL  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE   &kp GRAVE
&kp LSHFT  &trans    &kp AMPERSAND    &kp ASTERISK  &kp C_PLAY_PAUSE  &kp K_MUTE         &kp UNDER  &kp PLUS   &kp LBRC              &kp RBRC               &kp GRAVE  &kp TILDE
                                      &kp LGUI      &trans            &kp BACKSPACE      &kp RET    &mo 3      &kp LEFT_COMMAND
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &kp LA(LC(D))  &kp LA(LC(F))           &kp LA(LC(G))        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans         &kp LA(LC(LEFT_ARROW))  &kp LA(LC(RIGHT))    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans         &kp LA(LC(E))           &kp LA(LC(T))        &trans  &trans  &trans  &trans  &trans  &trans
                        &trans         &trans                  &trans               &trans  &trans  &trans
            >;
        };
    };
};
