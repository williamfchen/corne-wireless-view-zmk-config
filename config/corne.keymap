/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            label = "Base";
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E     &kp R  &kp T            &kp Y      &kp U  &kp I             &kp O    &kp P     &trans
&kp LEFT_CONTROL  &kp A  &kp S  &kp D     &kp F  &kp G            &kp H      &kp J  &kp K             &kp L    &kp SEMI  &kp SQT
&kp LEFT_SHIFT    &kp Z  &kp X  &kp C     &kp V  &kp B            &kp N      &kp M  &kp COMMA         &kp DOT  &kp FSLH  &kp ESC
                                &kp LGUI  &mo 2  &kp BACKSPACE    &kp SPACE  &mo 1  &kp LEFT_COMMAND
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT6 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Lower";
            bindings = <
&kp TAB           &trans        &kp PERCENT      &kp CARET    &kp AMPERSAND  &kp ASTERISK    &kp LC(GRAVE)   &kp UP_ARROW    &kp NUMBER_0     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3
&kp LEFT_CONTROL  &kp LEFT_ALT  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH       &kp DOLLAR      &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6
&kp LEFT_SHIFT    &trans        &trans           &trans       &trans         &trans          &trans          &trans          &kp NUMBER_0     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9
                                                 &kp LGUI     &mo 3          &kp ENTER       &kp SPACE       &trans          &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Raise";
            bindings = <
&kp LG(GRAVE)     &trans        &kp LG(X)          &kp LG(C)          &kp LG(V)         &kp C_VOLUME_UP    &trans     &trans     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans         &trans
&kp LEFT_CONTROL  &kp LEFT_ALT  &kp LG(BACKSPACE)  &kp LA(BACKSPACE)  &kp LG(Z)         &kp C_VOL_DN       &kp MINUS  &kp EQUAL  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE       &kp GRAVE
&kp LEFT_SHIFT    &trans        &trans             &trans             &kp C_PLAY_PAUSE  &kp K_MUTE         &kp UNDER  &kp PLUS   &kp LBRC              &kp RBRC               &kp BACKSLASH  &kp TILDE
                                                   &kp LGUI           &trans            &kp BACKSPACE      &kp RET    &mo 3      &kp LEFT_ALT
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &kp LA(LC(D))      &kp LA(LC(F))           &kp LA(LC(G))        &trans  &trans  &trans  &trans  &trans  &bt BT_NXT
&trans  &trans  &trans  &kp LA(LC(ENTER))  &kp LA(LC(LEFT_ARROW))  &kp LA(LC(RIGHT))    &trans  &trans  &trans  &trans  &trans  &bt BT_PRV
&trans  &trans  &trans  &trans             &kp LA(LC(E))           &kp LA(LC(T))        &trans  &trans  &trans  &trans  &trans  &bt BT_CLR
                        &trans             &trans                  &trans               &trans  &trans  &trans
            >;
        };
    };
};
